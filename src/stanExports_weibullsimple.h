// Generated by rstantools.  Do not edit by hand.

/*
    JMR is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    JMR is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with JMR.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_weibullsimple_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_weibullsimple");
    reader.add_event(92, 90, "end", "model_weibullsimple");
    return reader;
}
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
row_expan(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& X,
              const std::vector<int>& m, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 3;
        validate_non_negative_index("Xout", "sum(m)", sum(m));
        validate_non_negative_index("Xout", "cols(X)", cols(X));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Xout(sum(m), cols(X));
        stan::math::initialize(Xout, DUMMY_VAR__);
        stan::math::fill(Xout, DUMMY_VAR__);
        current_statement_begin__ = 4;
        int next_row(0);
        (void) next_row;  // dummy to suppress unused var warning
        stan::math::fill(next_row, std::numeric_limits<int>::min());
        stan::math::assign(next_row,1);
        current_statement_begin__ = 5;
        for (int i = 1; i <= rows(X); ++i) {
            current_statement_begin__ = 6;
            stan::model::assign(Xout, 
                        stan::model::cons_list(stan::model::index_min_max(next_row, ((next_row + get_base1(m, i, "m", 1)) - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                        rep_matrix(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "X"), get_base1(m, i, "m", 1)), 
                        "assigning variable Xout");
            current_statement_begin__ = 7;
            stan::math::assign(next_row, (next_row + get_base1(m, i, "m", 1)));
        }
        current_statement_begin__ = 9;
        return stan::math::promote_scalar<fun_return_scalar_t__>(Xout);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct row_expan_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& X,
              const std::vector<int>& m, std::ostream* pstream__) const {
        return row_expan(X, m, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
row_sums(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& X, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 12;
        validate_non_negative_index("s", "rows(X)", rows(X));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> s(rows(X));
        stan::math::initialize(s, DUMMY_VAR__);
        stan::math::fill(s, DUMMY_VAR__);
        current_statement_begin__ = 13;
        for (int i = 1; i <= rows(X); ++i) {
            current_statement_begin__ = 14;
            stan::model::assign(s, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        sum(get_base1(X, i, "X", 1)), 
                        "assigning variable s");
        }
        current_statement_begin__ = 15;
        return stan::math::promote_scalar<fun_return_scalar_t__>(s);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct row_sums_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& X, std::ostream* pstream__) const {
        return row_sums(X, pstream__);
    }
};
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
vpow(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& v,
         const T1__& p, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 18;
        validate_non_negative_index("s", "num_elements(v)", num_elements(v));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> s(num_elements(v));
        stan::math::initialize(s, DUMMY_VAR__);
        stan::math::fill(s, DUMMY_VAR__);
        current_statement_begin__ = 19;
        for (int i = 1; i <= num_elements(v); ++i) {
            current_statement_begin__ = 20;
            stan::model::assign(s, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        pow(get_base1(v, i, "v", 1), p), 
                        "assigning variable s");
        }
        current_statement_begin__ = 21;
        return stan::math::promote_scalar<fun_return_scalar_t__>(s);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct vpow_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& v,
         const T1__& p, std::ostream* pstream__) const {
        return vpow(v, p, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_weibullsimple
  : public stan::model::model_base_crtp<model_weibullsimple> {
private:
        int m;
        int n;
        int p1;
        int p2;
        int pp1;
        std::vector<int> id_freq;
        vector_d status;
        std::vector<double> y;
        vector_d st;
        matrix_d z;
        matrix_d z_rand;
        matrix_d x;
        matrix_d x_rand;
        double nu;
        matrix_d A;
        vector_d alpha_mu;
        vector_d alpha_sd;
        vector_d beta_mu;
        vector_d beta_sd;
        double phi_mu;
        double phi_sd;
        double a0;
        double a1;
        double b0;
        double b1;
        double c0;
        double c1;
public:
    model_weibullsimple(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_weibullsimple(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_weibullsimple_namespace::model_weibullsimple";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 25;
            context__.validate_dims("data initialization", "m", "int", context__.to_vec());
            m = int(0);
            vals_i__ = context__.vals_i("m");
            pos__ = 0;
            m = vals_i__[pos__++];
            check_greater_or_equal(function__, "m", m, 1);
            current_statement_begin__ = 26;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            check_greater_or_equal(function__, "n", n, m);
            current_statement_begin__ = 27;
            context__.validate_dims("data initialization", "p1", "int", context__.to_vec());
            p1 = int(0);
            vals_i__ = context__.vals_i("p1");
            pos__ = 0;
            p1 = vals_i__[pos__++];
            check_greater_or_equal(function__, "p1", p1, 2);
            current_statement_begin__ = 28;
            context__.validate_dims("data initialization", "p2", "int", context__.to_vec());
            p2 = int(0);
            vals_i__ = context__.vals_i("p2");
            pos__ = 0;
            p2 = vals_i__[pos__++];
            check_greater_or_equal(function__, "p2", p2, 1);
            current_statement_begin__ = 29;
            context__.validate_dims("data initialization", "pp1", "int", context__.to_vec());
            pp1 = int(0);
            vals_i__ = context__.vals_i("pp1");
            pos__ = 0;
            pp1 = vals_i__[pos__++];
            check_greater_or_equal(function__, "pp1", pp1, 2);
            current_statement_begin__ = 30;
            validate_non_negative_index("id_freq", "m", m);
            context__.validate_dims("data initialization", "id_freq", "int", context__.to_vec(m));
            id_freq = std::vector<int>(m, int(0));
            vals_i__ = context__.vals_i("id_freq");
            pos__ = 0;
            size_t id_freq_k_0_max__ = m;
            for (size_t k_0__ = 0; k_0__ < id_freq_k_0_max__; ++k_0__) {
                id_freq[k_0__] = vals_i__[pos__++];
            }
            size_t id_freq_i_0_max__ = m;
            for (size_t i_0__ = 0; i_0__ < id_freq_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "id_freq[i_0__]", id_freq[i_0__], 1);
            }
            current_statement_begin__ = 31;
            validate_non_negative_index("status", "m", m);
            context__.validate_dims("data initialization", "status", "vector_d", context__.to_vec(m));
            status = Eigen::Matrix<double, Eigen::Dynamic, 1>(m);
            vals_r__ = context__.vals_r("status");
            pos__ = 0;
            size_t status_j_1_max__ = m;
            for (size_t j_1__ = 0; j_1__ < status_j_1_max__; ++j_1__) {
                status(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "status", status, 0);
            check_less_or_equal(function__, "status", status, 1);
            current_statement_begin__ = 32;
            validate_non_negative_index("y", "n", n);
            context__.validate_dims("data initialization", "y", "double", context__.to_vec(n));
            y = std::vector<double>(n, double(0));
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_k_0_max__ = n;
            for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                y[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 33;
            validate_non_negative_index("st", "m", m);
            context__.validate_dims("data initialization", "st", "vector_d", context__.to_vec(m));
            st = Eigen::Matrix<double, Eigen::Dynamic, 1>(m);
            vals_r__ = context__.vals_r("st");
            pos__ = 0;
            size_t st_j_1_max__ = m;
            for (size_t j_1__ = 0; j_1__ < st_j_1_max__; ++j_1__) {
                st(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "st", st, 0);
            current_statement_begin__ = 34;
            validate_non_negative_index("z", "m", m);
            validate_non_negative_index("z", "p2", p2);
            context__.validate_dims("data initialization", "z", "matrix_d", context__.to_vec(m,p2));
            z = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(m, p2);
            vals_r__ = context__.vals_r("z");
            pos__ = 0;
            size_t z_j_2_max__ = p2;
            size_t z_j_1_max__ = m;
            for (size_t j_2__ = 0; j_2__ < z_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < z_j_1_max__; ++j_1__) {
                    z(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 35;
            validate_non_negative_index("z_rand", "m", m);
            validate_non_negative_index("z_rand", "pp1", pp1);
            context__.validate_dims("data initialization", "z_rand", "matrix_d", context__.to_vec(m,pp1));
            z_rand = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(m, pp1);
            vals_r__ = context__.vals_r("z_rand");
            pos__ = 0;
            size_t z_rand_j_2_max__ = pp1;
            size_t z_rand_j_1_max__ = m;
            for (size_t j_2__ = 0; j_2__ < z_rand_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < z_rand_j_1_max__; ++j_1__) {
                    z_rand(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 36;
            validate_non_negative_index("x", "n", n);
            validate_non_negative_index("x", "p1", p1);
            context__.validate_dims("data initialization", "x", "matrix_d", context__.to_vec(n,p1));
            x = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n, p1);
            vals_r__ = context__.vals_r("x");
            pos__ = 0;
            size_t x_j_2_max__ = p1;
            size_t x_j_1_max__ = n;
            for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                    x(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 37;
            validate_non_negative_index("x_rand", "n", n);
            validate_non_negative_index("x_rand", "pp1", pp1);
            context__.validate_dims("data initialization", "x_rand", "matrix_d", context__.to_vec(n,pp1));
            x_rand = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n, pp1);
            vals_r__ = context__.vals_r("x_rand");
            pos__ = 0;
            size_t x_rand_j_2_max__ = pp1;
            size_t x_rand_j_1_max__ = n;
            for (size_t j_2__ = 0; j_2__ < x_rand_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x_rand_j_1_max__; ++j_1__) {
                    x_rand(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 38;
            context__.validate_dims("data initialization", "nu", "double", context__.to_vec());
            nu = double(0);
            vals_r__ = context__.vals_r("nu");
            pos__ = 0;
            nu = vals_r__[pos__++];
            check_greater_or_equal(function__, "nu", nu, pp1);
            current_statement_begin__ = 39;
            validate_non_negative_index("A", "pp1", pp1);
            validate_non_negative_index("A", "pp1", pp1);
            context__.validate_dims("data initialization", "A", "matrix_d", context__.to_vec(pp1,pp1));
            A = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(pp1, pp1);
            vals_r__ = context__.vals_r("A");
            pos__ = 0;
            size_t A_j_2_max__ = pp1;
            size_t A_j_1_max__ = pp1;
            for (size_t j_2__ = 0; j_2__ < A_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < A_j_1_max__; ++j_1__) {
                    A(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            stan::math::check_cov_matrix(function__, "A", A);
            current_statement_begin__ = 40;
            validate_non_negative_index("alpha_mu", "p1", p1);
            context__.validate_dims("data initialization", "alpha_mu", "vector_d", context__.to_vec(p1));
            alpha_mu = Eigen::Matrix<double, Eigen::Dynamic, 1>(p1);
            vals_r__ = context__.vals_r("alpha_mu");
            pos__ = 0;
            size_t alpha_mu_j_1_max__ = p1;
            for (size_t j_1__ = 0; j_1__ < alpha_mu_j_1_max__; ++j_1__) {
                alpha_mu(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 41;
            validate_non_negative_index("alpha_sd", "p1", p1);
            context__.validate_dims("data initialization", "alpha_sd", "vector_d", context__.to_vec(p1));
            alpha_sd = Eigen::Matrix<double, Eigen::Dynamic, 1>(p1);
            vals_r__ = context__.vals_r("alpha_sd");
            pos__ = 0;
            size_t alpha_sd_j_1_max__ = p1;
            for (size_t j_1__ = 0; j_1__ < alpha_sd_j_1_max__; ++j_1__) {
                alpha_sd(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "alpha_sd", alpha_sd, 0);
            current_statement_begin__ = 42;
            validate_non_negative_index("beta_mu", "p2", p2);
            context__.validate_dims("data initialization", "beta_mu", "vector_d", context__.to_vec(p2));
            beta_mu = Eigen::Matrix<double, Eigen::Dynamic, 1>(p2);
            vals_r__ = context__.vals_r("beta_mu");
            pos__ = 0;
            size_t beta_mu_j_1_max__ = p2;
            for (size_t j_1__ = 0; j_1__ < beta_mu_j_1_max__; ++j_1__) {
                beta_mu(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 43;
            validate_non_negative_index("beta_sd", "p2", p2);
            context__.validate_dims("data initialization", "beta_sd", "vector_d", context__.to_vec(p2));
            beta_sd = Eigen::Matrix<double, Eigen::Dynamic, 1>(p2);
            vals_r__ = context__.vals_r("beta_sd");
            pos__ = 0;
            size_t beta_sd_j_1_max__ = p2;
            for (size_t j_1__ = 0; j_1__ < beta_sd_j_1_max__; ++j_1__) {
                beta_sd(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "beta_sd", beta_sd, 0);
            current_statement_begin__ = 44;
            context__.validate_dims("data initialization", "phi_mu", "double", context__.to_vec());
            phi_mu = double(0);
            vals_r__ = context__.vals_r("phi_mu");
            pos__ = 0;
            phi_mu = vals_r__[pos__++];
            current_statement_begin__ = 45;
            context__.validate_dims("data initialization", "phi_sd", "double", context__.to_vec());
            phi_sd = double(0);
            vals_r__ = context__.vals_r("phi_sd");
            pos__ = 0;
            phi_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "phi_sd", phi_sd, 0);
            current_statement_begin__ = 46;
            context__.validate_dims("data initialization", "a0", "double", context__.to_vec());
            a0 = double(0);
            vals_r__ = context__.vals_r("a0");
            pos__ = 0;
            a0 = vals_r__[pos__++];
            check_greater_or_equal(function__, "a0", a0, 0);
            current_statement_begin__ = 47;
            context__.validate_dims("data initialization", "a1", "double", context__.to_vec());
            a1 = double(0);
            vals_r__ = context__.vals_r("a1");
            pos__ = 0;
            a1 = vals_r__[pos__++];
            check_greater_or_equal(function__, "a1", a1, 0);
            current_statement_begin__ = 48;
            context__.validate_dims("data initialization", "b0", "double", context__.to_vec());
            b0 = double(0);
            vals_r__ = context__.vals_r("b0");
            pos__ = 0;
            b0 = vals_r__[pos__++];
            check_greater_or_equal(function__, "b0", b0, 0);
            current_statement_begin__ = 49;
            context__.validate_dims("data initialization", "b1", "double", context__.to_vec());
            b1 = double(0);
            vals_r__ = context__.vals_r("b1");
            pos__ = 0;
            b1 = vals_r__[pos__++];
            check_greater_or_equal(function__, "b1", b1, 0);
            current_statement_begin__ = 50;
            context__.validate_dims("data initialization", "c0", "double", context__.to_vec());
            c0 = double(0);
            vals_r__ = context__.vals_r("c0");
            pos__ = 0;
            c0 = vals_r__[pos__++];
            check_greater_or_equal(function__, "c0", c0, 0);
            current_statement_begin__ = 51;
            context__.validate_dims("data initialization", "c1", "double", context__.to_vec());
            c1 = double(0);
            vals_r__ = context__.vals_r("c1");
            pos__ = 0;
            c1 = vals_r__[pos__++];
            check_greater_or_equal(function__, "c1", c1, 0);
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 54;
            num_params_r__ += 1;
            current_statement_begin__ = 55;
            num_params_r__ += 1;
            current_statement_begin__ = 56;
            num_params_r__ += 1;
            current_statement_begin__ = 57;
            validate_non_negative_index("alpha", "p1", p1);
            num_params_r__ += p1;
            current_statement_begin__ = 58;
            validate_non_negative_index("beta", "p2", p2);
            num_params_r__ += p2;
            current_statement_begin__ = 59;
            num_params_r__ += 1;
            current_statement_begin__ = 60;
            validate_non_negative_index("b_unscaled", "pp1", pp1);
            validate_non_negative_index("b_unscaled", "m", m);
            num_params_r__ += (pp1 * m);
            current_statement_begin__ = 61;
            validate_non_negative_index("rand_cov", "pp1", pp1);
            validate_non_negative_index("rand_cov", "pp1", pp1);
            num_params_r__ += (pp1 + ((pp1 * (pp1 - 1)) / 2));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_weibullsimple() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 54;
        if (!(context__.contains_r("inv_sigma2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable inv_sigma2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("inv_sigma2");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "inv_sigma2", "double", context__.to_vec());
        double inv_sigma2(0);
        inv_sigma2 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, inv_sigma2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable inv_sigma2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 55;
        if (!(context__.contains_r("inv_rho2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable inv_rho2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("inv_rho2");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "inv_rho2", "double", context__.to_vec());
        double inv_rho2(0);
        inv_rho2 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, inv_rho2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable inv_rho2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 56;
        if (!(context__.contains_r("squ_kappa")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable squ_kappa missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("squ_kappa");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "squ_kappa", "double", context__.to_vec());
        double squ_kappa(0);
        squ_kappa = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, squ_kappa);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable squ_kappa: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 57;
        if (!(context__.contains_r("alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "p1", p1);
        context__.validate_dims("parameter initialization", "alpha", "vector_d", context__.to_vec(p1));
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha(p1);
        size_t alpha_j_1_max__ = p1;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            alpha(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(alpha);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 58;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "p2", p2);
        context__.validate_dims("parameter initialization", "beta", "vector_d", context__.to_vec(p2));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta(p2);
        size_t beta_j_1_max__ = p2;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            beta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 59;
        if (!(context__.contains_r("phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "phi", "double", context__.to_vec());
        double phi(0);
        phi = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(phi);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phi: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 60;
        if (!(context__.contains_r("b_unscaled")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b_unscaled missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b_unscaled");
        pos__ = 0U;
        validate_non_negative_index("b_unscaled", "pp1", pp1);
        validate_non_negative_index("b_unscaled", "m", m);
        context__.validate_dims("parameter initialization", "b_unscaled", "matrix_d", context__.to_vec(pp1,m));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> b_unscaled(pp1, m);
        size_t b_unscaled_j_2_max__ = m;
        size_t b_unscaled_j_1_max__ = pp1;
        for (size_t j_2__ = 0; j_2__ < b_unscaled_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < b_unscaled_j_1_max__; ++j_1__) {
                b_unscaled(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(b_unscaled);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b_unscaled: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 61;
        if (!(context__.contains_r("rand_cov")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rand_cov missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rand_cov");
        pos__ = 0U;
        validate_non_negative_index("rand_cov", "pp1", pp1);
        validate_non_negative_index("rand_cov", "pp1", pp1);
        context__.validate_dims("parameter initialization", "rand_cov", "matrix_d", context__.to_vec(pp1,pp1));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> rand_cov(pp1, pp1);
        size_t rand_cov_j_2_max__ = pp1;
        size_t rand_cov_j_1_max__ = pp1;
        for (size_t j_2__ = 0; j_2__ < rand_cov_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < rand_cov_j_1_max__; ++j_1__) {
                rand_cov(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.cov_matrix_unconstrain(rand_cov);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rand_cov: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 54;
            local_scalar_t__ inv_sigma2;
            (void) inv_sigma2;  // dummy to suppress unused var warning
            if (jacobian__)
                inv_sigma2 = in__.scalar_lb_constrain(0, lp__);
            else
                inv_sigma2 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 55;
            local_scalar_t__ inv_rho2;
            (void) inv_rho2;  // dummy to suppress unused var warning
            if (jacobian__)
                inv_rho2 = in__.scalar_lb_constrain(0, lp__);
            else
                inv_rho2 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 56;
            local_scalar_t__ squ_kappa;
            (void) squ_kappa;  // dummy to suppress unused var warning
            if (jacobian__)
                squ_kappa = in__.scalar_lb_constrain(0, lp__);
            else
                squ_kappa = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 57;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha;
            (void) alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha = in__.vector_constrain(p1, lp__);
            else
                alpha = in__.vector_constrain(p1);
            current_statement_begin__ = 58;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.vector_constrain(p2, lp__);
            else
                beta = in__.vector_constrain(p2);
            current_statement_begin__ = 59;
            local_scalar_t__ phi;
            (void) phi;  // dummy to suppress unused var warning
            if (jacobian__)
                phi = in__.scalar_constrain(lp__);
            else
                phi = in__.scalar_constrain();
            current_statement_begin__ = 60;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> b_unscaled;
            (void) b_unscaled;  // dummy to suppress unused var warning
            if (jacobian__)
                b_unscaled = in__.matrix_constrain(pp1, m, lp__);
            else
                b_unscaled = in__.matrix_constrain(pp1, m);
            current_statement_begin__ = 61;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> rand_cov;
            (void) rand_cov;  // dummy to suppress unused var warning
            if (jacobian__)
                rand_cov = in__.cov_matrix_constrain(pp1, lp__);
            else
                rand_cov = in__.cov_matrix_constrain(pp1);
            // transformed parameters
            current_statement_begin__ = 64;
            local_scalar_t__ kappa;
            (void) kappa;  // dummy to suppress unused var warning
            stan::math::initialize(kappa, DUMMY_VAR__);
            stan::math::fill(kappa, DUMMY_VAR__);
            current_statement_begin__ = 65;
            local_scalar_t__ rho;
            (void) rho;  // dummy to suppress unused var warning
            stan::math::initialize(rho, DUMMY_VAR__);
            stan::math::fill(rho, DUMMY_VAR__);
            current_statement_begin__ = 66;
            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            stan::math::initialize(sigma, DUMMY_VAR__);
            stan::math::fill(sigma, DUMMY_VAR__);
            current_statement_begin__ = 67;
            validate_non_negative_index("b", "m", m);
            validate_non_negative_index("b", "pp1", pp1);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> b(m, pp1);
            stan::math::initialize(b, DUMMY_VAR__);
            stan::math::fill(b, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 68;
            stan::math::assign(kappa, stan::math::sqrt(squ_kappa));
            current_statement_begin__ = 69;
            stan::math::assign(rho, inv_sqrt(inv_rho2));
            current_statement_begin__ = 70;
            stan::math::assign(sigma, inv_sqrt(inv_sigma2));
            current_statement_begin__ = 71;
            stan::math::assign(b, transpose(multiply(cholesky_decompose(rand_cov), b_unscaled)));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 64;
            if (stan::math::is_uninitialized(kappa)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: kappa";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable kappa: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "kappa", kappa, 0);
            current_statement_begin__ = 65;
            if (stan::math::is_uninitialized(rho)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: rho";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable rho: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "rho", rho, 0);
            current_statement_begin__ = 66;
            if (stan::math::is_uninitialized(sigma)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: sigma";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sigma: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            check_greater_or_equal(function__, "sigma", sigma, 0);
            current_statement_begin__ = 67;
            size_t b_j_1_max__ = m;
            size_t b_j_2_max__ = pp1;
            for (size_t j_1__ = 0; j_1__ < b_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < b_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(b(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: b" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable b: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            // model body
            {
            current_statement_begin__ = 74;
            validate_non_negative_index("pred0", "m", m);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> pred0(m);
            stan::math::initialize(pred0, DUMMY_VAR__);
            stan::math::fill(pred0, DUMMY_VAR__);
            current_statement_begin__ = 75;
            validate_non_negative_index("pred1", "m", m);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> pred1(m);
            stan::math::initialize(pred1, DUMMY_VAR__);
            stan::math::fill(pred1, DUMMY_VAR__);
            current_statement_begin__ = 76;
            validate_non_negative_index("psi", "m", m);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> psi(m);
            stan::math::initialize(psi, DUMMY_VAR__);
            stan::math::fill(psi, DUMMY_VAR__);
            current_statement_begin__ = 77;
            stan::math::assign(pred0, multiply(z, beta));
            current_statement_begin__ = 78;
            stan::math::assign(pred1, add(pred0, multiply(phi, row_sums(elt_multiply(z_rand, b), pstream__))));
            current_statement_begin__ = 79;
            stan::math::assign(psi, elt_divide(elt_multiply(stan::math::exp(subtract(minus(pred0), multiply(phi, col(b, 1)))), subtract(1, stan::math::exp(elt_multiply(multiply(-(phi), col(b, 2)), st)))), multiply(phi, col(b, 2))));
            current_statement_begin__ = 80;
            lp_accum__.add(normal_log(y, add(multiply(x, alpha), row_sums(elt_multiply(x_rand, row_expan(b, id_freq, pstream__)), pstream__)), sigma));
            current_statement_begin__ = 81;
            lp_accum__.add(subtract(elt_multiply(status, subtract(add((stan::math::log(kappa) + (kappa * stan::math::log(rho))), multiply((kappa - 1), stan::math::log(psi))), pred1)), vpow(multiply(rho, psi), kappa, pstream__)));
            current_statement_begin__ = 82;
            lp_accum__.add(normal_log(alpha, alpha_mu, alpha_sd));
            current_statement_begin__ = 83;
            lp_accum__.add(normal_log(beta, beta_mu, beta_sd));
            current_statement_begin__ = 84;
            lp_accum__.add(normal_log(phi, phi_mu, phi_sd));
            current_statement_begin__ = 85;
            lp_accum__.add(std_normal_log(to_vector(b_unscaled)));
            current_statement_begin__ = 86;
            lp_accum__.add(inv_wishart_log(rand_cov, nu, A));
            current_statement_begin__ = 87;
            lp_accum__.add(gamma_log(inv_sigma2, a0, a1));
            current_statement_begin__ = 88;
            lp_accum__.add(gamma_log(inv_rho2, b0, b1));
            current_statement_begin__ = 89;
            lp_accum__.add(gamma_log(squ_kappa, c0, c1));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("inv_sigma2");
        names__.push_back("inv_rho2");
        names__.push_back("squ_kappa");
        names__.push_back("alpha");
        names__.push_back("beta");
        names__.push_back("phi");
        names__.push_back("b_unscaled");
        names__.push_back("rand_cov");
        names__.push_back("kappa");
        names__.push_back("rho");
        names__.push_back("sigma");
        names__.push_back("b");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(p1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(p2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(pp1);
        dims__.push_back(m);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(pp1);
        dims__.push_back(pp1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(m);
        dims__.push_back(pp1);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_weibullsimple_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double inv_sigma2 = in__.scalar_lb_constrain(0);
        vars__.push_back(inv_sigma2);
        double inv_rho2 = in__.scalar_lb_constrain(0);
        vars__.push_back(inv_rho2);
        double squ_kappa = in__.scalar_lb_constrain(0);
        vars__.push_back(squ_kappa);
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha = in__.vector_constrain(p1);
        size_t alpha_j_1_max__ = p1;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            vars__.push_back(alpha(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta = in__.vector_constrain(p2);
        size_t beta_j_1_max__ = p2;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            vars__.push_back(beta(j_1__));
        }
        double phi = in__.scalar_constrain();
        vars__.push_back(phi);
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> b_unscaled = in__.matrix_constrain(pp1, m);
        size_t b_unscaled_j_2_max__ = m;
        size_t b_unscaled_j_1_max__ = pp1;
        for (size_t j_2__ = 0; j_2__ < b_unscaled_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < b_unscaled_j_1_max__; ++j_1__) {
                vars__.push_back(b_unscaled(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> rand_cov = in__.cov_matrix_constrain(pp1);
        size_t rand_cov_j_2_max__ = pp1;
        size_t rand_cov_j_1_max__ = pp1;
        for (size_t j_2__ = 0; j_2__ < rand_cov_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < rand_cov_j_1_max__; ++j_1__) {
                vars__.push_back(rand_cov(j_1__, j_2__));
            }
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 64;
            double kappa;
            (void) kappa;  // dummy to suppress unused var warning
            stan::math::initialize(kappa, DUMMY_VAR__);
            stan::math::fill(kappa, DUMMY_VAR__);
            current_statement_begin__ = 65;
            double rho;
            (void) rho;  // dummy to suppress unused var warning
            stan::math::initialize(rho, DUMMY_VAR__);
            stan::math::fill(rho, DUMMY_VAR__);
            current_statement_begin__ = 66;
            double sigma;
            (void) sigma;  // dummy to suppress unused var warning
            stan::math::initialize(sigma, DUMMY_VAR__);
            stan::math::fill(sigma, DUMMY_VAR__);
            current_statement_begin__ = 67;
            validate_non_negative_index("b", "m", m);
            validate_non_negative_index("b", "pp1", pp1);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> b(m, pp1);
            stan::math::initialize(b, DUMMY_VAR__);
            stan::math::fill(b, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 68;
            stan::math::assign(kappa, stan::math::sqrt(squ_kappa));
            current_statement_begin__ = 69;
            stan::math::assign(rho, inv_sqrt(inv_rho2));
            current_statement_begin__ = 70;
            stan::math::assign(sigma, inv_sqrt(inv_sigma2));
            current_statement_begin__ = 71;
            stan::math::assign(b, transpose(multiply(cholesky_decompose(rand_cov), b_unscaled)));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 64;
            check_greater_or_equal(function__, "kappa", kappa, 0);
            current_statement_begin__ = 65;
            check_greater_or_equal(function__, "rho", rho, 0);
            current_statement_begin__ = 66;
            check_greater_or_equal(function__, "sigma", sigma, 0);
            // write transformed parameters
            if (include_tparams__) {
                vars__.push_back(kappa);
                vars__.push_back(rho);
                vars__.push_back(sigma);
                size_t b_j_2_max__ = pp1;
                size_t b_j_1_max__ = m;
                for (size_t j_2__ = 0; j_2__ < b_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < b_j_1_max__; ++j_1__) {
                        vars__.push_back(b(j_1__, j_2__));
                    }
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_weibullsimple";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "inv_sigma2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "inv_rho2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "squ_kappa";
        param_names__.push_back(param_name_stream__.str());
        size_t alpha_j_1_max__ = p1;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_j_1_max__ = p2;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi";
        param_names__.push_back(param_name_stream__.str());
        size_t b_unscaled_j_2_max__ = m;
        size_t b_unscaled_j_1_max__ = pp1;
        for (size_t j_2__ = 0; j_2__ < b_unscaled_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < b_unscaled_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "b_unscaled" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t rand_cov_j_2_max__ = pp1;
        size_t rand_cov_j_1_max__ = pp1;
        for (size_t j_2__ = 0; j_2__ < rand_cov_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < rand_cov_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rand_cov" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "kappa";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma";
            param_names__.push_back(param_name_stream__.str());
            size_t b_j_2_max__ = pp1;
            size_t b_j_1_max__ = m;
            for (size_t j_2__ = 0; j_2__ < b_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < b_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "b" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "inv_sigma2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "inv_rho2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "squ_kappa";
        param_names__.push_back(param_name_stream__.str());
        size_t alpha_j_1_max__ = p1;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t beta_j_1_max__ = p2;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi";
        param_names__.push_back(param_name_stream__.str());
        size_t b_unscaled_j_2_max__ = m;
        size_t b_unscaled_j_1_max__ = pp1;
        for (size_t j_2__ = 0; j_2__ < b_unscaled_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < b_unscaled_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "b_unscaled" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t rand_cov_j_1_max__ = (pp1 + ((pp1 * (pp1 - 1)) / 2));
        for (size_t j_1__ = 0; j_1__ < rand_cov_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rand_cov" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "kappa";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma";
            param_names__.push_back(param_name_stream__.str());
            size_t b_j_2_max__ = pp1;
            size_t b_j_1_max__ = m;
            for (size_t j_2__ = 0; j_2__ < b_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < b_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "b" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_weibullsimple_namespace::model_weibullsimple stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
